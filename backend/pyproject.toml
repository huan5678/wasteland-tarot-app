[project]
name = "wasteland-tarot-backend"
version = "0.1.0"
description = "Fallout-themed Tarot Reading API Backend"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "psycopg[binary]>=3.1.0",
    "supabase>=2.0.0",
    "postgrest>=0.13.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "redis>=5.0.0",
    "aiosqlite>=0.21.0",
    "bcrypt>=4.0.0",
    "psutil>=7.1.0",
    "anthropic>=0.39.0",
    "openai>=1.54.0",
    "google-generativeai>=0.8.0",
    "apscheduler>=3.10.0",
    "pytz>=2024.1",
    "python-dateutil>=2.8.0",
    "webauthn>=2.4.0",
]

[project.optional-dependencies]
test = [
    # Core testing framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.5.0",

    # HTTP testing
    "httpx>=0.26.0",
    "pytest-httpx>=0.27.0",

    # Database testing
    "factory-boy>=3.3.0",
    "sqlalchemy-utils>=0.41.0",

    # Data generation and mocking
    "faker>=21.0.0",
    "freezegun>=1.4.0",
    "responses>=0.24.0",

    # Performance testing
    "pytest-benchmark>=4.0.0",
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",

    # Code quality
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.8.0",

    # Reporting
    "pytest-html>=4.1.0",
    "pytest-json-report>=1.5.0",

    # Additional utilities
    "pytest-sugar>=0.9.7",
    "ipdb>=0.13.13",
]

dev = [
    "pre-commit>=3.6.0",
    "ruff>=0.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests for individual functions",
    "integration: Integration tests for API endpoints",
    "async: Asynchronous operation tests",
    "karma: Karma system specific tests",
    "faction: Faction alignment tests",
    "character: Character interpretation tests",
    "divination: Reading and divination tests",
    "slow: Tests that take longer to run",
    "audio: Audio system integration tests",
    "database: Database operation tests",
    "security: Authentication and security tests",
    "performance: Performance and load tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "tests"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true

[[tool.mypy.overrides]]
module = [
    "faker.*",
    "factory.*",
    "sqlalchemy_utils.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py311"
extend-exclude = ["migrations"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[dependency-groups]
dev = [
    "factory-boy>=3.3.3",
    "faker>=37.8.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=7.0.0",
    "pytest-factoryboy>=2.8.1",
    "pytest-httpx>=0.35.0",
    "pytest-mock>=3.15.1",
    "responses>=0.25.8",
    "sqlalchemy-utils>=0.42.0",
]
test = [
    "pytest>=8.4.2",
]
