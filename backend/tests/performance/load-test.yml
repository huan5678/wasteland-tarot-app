# Daily Bingo API 負載測試
# 使用 Artillery 模擬 1000+ 並發請求
#
# 執行方式:
# npm install -g artillery
# artillery run backend/tests/performance/load-test.yml
#
# 需求對應: Performance targets validation
# Task: 30

config:
  target: "http://localhost:8000"
  phases:
    # Phase 1: Warm-up (暖機階段)
    - duration: 60
      arrivalRate: 10
      name: "Warm-up"

    # Phase 2: Ramp-up (逐漸增加負載)
    - duration: 120
      arrivalRate: 50
      rampTo: 200
      name: "Ramp-up to 200 rps"

    # Phase 3: Peak load (峰值負載)
    - duration: 180
      arrivalRate: 500
      name: "Peak load - 500 rps"

    # Phase 4: Stress test (壓力測試)
    - duration: 120
      arrivalRate: 1000
      name: "Stress test - 1000 rps"

  # 效能指標閾值
  ensure:
    p95: 200  # p95 回應時間 <200ms
    p99: 500  # p99 回應時間 <500ms
    maxErrorRate: 1  # 錯誤率 <1%

  # 全域變數
  variables:
    baseUrl: "http://localhost:8000"
    apiVersion: "v1"

  # 全域 Header
  defaults:
    headers:
      Content-Type: "application/json"

scenarios:
  # Scenario 1: 查詢今日號碼（無需認證）
  - name: "Get Daily Number"
    weight: 30
    flow:
      - get:
          url: "/api/{{ apiVersion }}/bingo/daily-number"
          capture:
            - json: "$.number"
              as: "dailyNumber"
          expect:
            - statusCode: [200, 404]
            - contentType: json

  # Scenario 2: 查詢賓果狀態（需認證）
  - name: "Get Bingo Status"
    weight: 25
    flow:
      # 登入取得 Token
      - post:
          url: "/api/{{ apiVersion }}/auth/login"
          json:
            email: "test{{ $randomNumber() }}@example.com"
            password: "test123456"
          capture:
            - json: "$.access_token"
              as: "authToken"

      # 查詢狀態
      - get:
          url: "/api/{{ apiVersion }}/bingo/status"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200
            - contentType: json
            - hasProperty: has_card

  # Scenario 3: 建立賓果卡（需認證）
  - name: "Create Bingo Card"
    weight: 15
    flow:
      # 登入
      - post:
          url: "/api/{{ apiVersion }}/auth/login"
          json:
            email: "test{{ $randomNumber() }}@example.com"
            password: "test123456"
          capture:
            - json: "$.access_token"
              as: "authToken"

      # 建立賓果卡
      - post:
          url: "/api/{{ apiVersion }}/bingo/card"
          headers:
            Authorization: "Bearer {{ authToken }}"
          json:
            numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
          expect:
            - statusCode: [201, 409]  # 成功或已存在
            - contentType: json

  # Scenario 4: 領取今日號碼（需認證）
  - name: "Claim Daily Number"
    weight: 20
    flow:
      # 登入
      - post:
          url: "/api/{{ apiVersion }}/auth/login"
          json:
            email: "test{{ $randomNumber() }}@example.com"
            password: "test123456"
          capture:
            - json: "$.access_token"
              as: "authToken"

      # 領取號碼
      - post:
          url: "/api/{{ apiVersion }}/bingo/claim"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: [200, 404, 409]  # 成功、無卡片、或已領取
            - contentType: json

  # Scenario 5: 查詢連線狀態（需認證）
  - name: "Get Lines Status"
    weight: 10
    flow:
      # 登入
      - post:
          url: "/api/{{ apiVersion }}/auth/login"
          json:
            email: "test{{ $randomNumber() }}@example.com"
            password: "test123456"
          capture:
            - json: "$.access_token"
              as: "authToken"

      # 查詢連線
      - get:
          url: "/api/{{ apiVersion }}/bingo/lines"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: [200, 404]
            - contentType: json

# 自定義插件（可選）
plugins:
  # 記憶體使用監控
  statsd:
    host: localhost
    port: 8125
    prefix: "artillery.bingo"

  # 指標輸出
  metrics-by-endpoint:
    stripQueryString: true
    metricsNamespace: "bingo_api"

# 執行後處理器
after:
  # 生成 HTML 報告
  - type: "html"
    output: "backend/tests/performance/load-test-report.html"

  # 輸出 JSON 結果
  - type: "json"
    output: "backend/tests/performance/load-test-results.json"
