/**
 * Enhanced Card Modal System Test Suite
 * Tests all components and integrations for Priority 4 implementation
 */

import React from 'react'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import '@testing-library/jest-dom'
import { CardDetailModal, DetailedTarotCard } from '../components/tarot/CardDetailModal'
import CardRelationships from '../components/tarot/CardRelationships'
import StudyMode from '../components/tarot/StudyMode'
import CardShare from '../components/tarot/CardShare'
import { useCardInteractions } from '../hooks/useCardInteractions'
import { useTextToSpeech } from '../hooks/useTextToSpeech'
import { initializeEnhancedCardModal, DEFAULT_CONFIG } from '../utils/enhancedCardModalIntegration'

// Mock hooks
jest.mock('../hooks/useCardInteractions')
jest.mock('../hooks/useTextToSpeech')
jest.mock('../utils/speechHandler')

const mockUseCardInteractions = useCardInteractions as jest.MockedFunction<typeof useCardInteractions>
const mockUseTextToSpeech = useTextToSpeech as jest.MockedFunction<typeof useTextToSpeech>

// Test data
const mockCard: DetailedTarotCard = {\n  id: '1',\n  name: 'The Vault Dweller',\n  suit: 'MAJOR_ARCANA',\n  card_number: 0,\n  number: 0,\n  image_url: '/images/vault-dweller.jpg',\n  upright_meaning: 'New beginnings in the wasteland, hope for the future',\n  reversed_meaning: 'Naivety, unpreparedness for the harsh wasteland',\n  description: 'A figure emerging from Vault 111, representing new beginnings and hope in the post-apocalyptic world.',\n  keywords: ['beginnings', 'hope', 'innocence', 'journey'],\n  fallout_reference: 'Represents the player character emerging from the vault',\n  character_voice_interpretations: {\n    'pip_boy': 'Welcome to the wasteland! Time to start your adventure.',\n    'super_mutant': 'Tiny human leave metal cave. Now become strong.',\n    'ghoul': 'Another smoothskin stepping into our world.',\n    'raider': 'Fresh meat from the vault! Easy pickings.',\n    'brotherhood_scribe': 'Vault-Tec subject exhibiting standard emergence patterns.'\n  },\n  radiation_factor: 0.1,\n  karma_alignment: 'NEUTRAL',\n  symbolism: 'The card shows a vault door opening to reveal a figure stepping into sunlight',\n  element: 'Air',\n  astrological_association: 'Uranus - sudden change and new beginnings',\n  position: 'upright',\n  vault_reference: 111,\n  threat_level: 2,\n  wasteland_humor: 'War never changes, but your underwear should.',\n  nuka_cola_reference: 'The figure clutches a Nuka-Cola Quantum for luck',\n  special_ability: 'Vault-Tec training provides +1 to all SPECIAL stats',\n  draw_frequency: 0.15,\n  total_appearances: 42,\n  positive_feedback_count: 38,\n  negative_feedback_count: 4,\n  average_rating: 4.2,\n  rarity_level: 'legendary',\n  is_active: true,\n  is_complete: true,\n  created_at: '2024-01-01T00:00:00Z',\n  updated_at: '2024-01-15T12:00:00Z'\n}\n\nconst mockRelatedCards: DetailedTarotCard[] = [\n  {\n    ...mockCard,\n    id: '2',\n    name: 'The Overseer',\n    suit: 'MAJOR_ARCANA',\n    number: 1\n  },\n  {\n    ...mockCard,\n    id: '3',\n    name: 'Two of Bottle Caps',\n    suit: 'BOTTLE_CAPS',\n    number: 2\n  }\n]\n\n// Mock implementations\nconst mockCardInteractions = {\n  isBookmarked: jest.fn(() => false),\n  toggleBookmark: jest.fn(),\n  updateBookmarkNotes: jest.fn(),\n  getStudyProgress: jest.fn(() => ({\n    cardId: '1',\n    timesViewed: 5,\n    studyProgress: 65,\n    lastViewed: new Date(),\n    masteryLevel: 'intermediate' as const,\n    quizScores: [80, 85, 90]\n  })),\n  markAsViewed: jest.fn(),\n  updatePersonalData: jest.fn(),\n  bookmarks: new Map(),\n  studyData: new Map(),\n  personalData: new Map(),\n  addBookmark: jest.fn(),\n  removeBookmark: jest.fn(),\n  updateStudyProgress: jest.fn(),\n  updateMasteryLevel: jest.fn(),\n  getPersonalData: jest.fn(),\n  getTotalBookmarks: jest.fn(() => 0),\n  getTotalStudyTime: jest.fn(() => 0),\n  getAverageAccuracy: jest.fn(() => 0),\n  getMostViewedCards: jest.fn(() => []),\n  exportData: jest.fn(() => '{}'),\n  importData: jest.fn(),\n  syncWithServer: jest.fn(),\n  isLoading: false,\n  error: null\n}\n\nconst mockTextToSpeech = {\n  speak: jest.fn(),\n  stop: jest.fn(),\n  isSupported: true,\n  isPlaying: false,\n  availableVoices: [],\n  currentVoice: 'pip_boy',\n  setCurrentVoice: jest.fn(),\n  volume: 0.8,\n  setVolume: jest.fn()\n}\n\ndescribe('Enhanced Card Modal System', () => {\n  beforeEach(() => {\n    mockUseCardInteractions.mockReturnValue(mockCardInteractions)\n    mockUseTextToSpeech.mockReturnValue(mockTextToSpeech)\n    \n    // Reset all mocks\n    jest.clearAllMocks()\n    \n    // Mock DOM APIs\n    Object.defineProperty(window, 'speechSynthesis', {\n      writable: true,\n      value: {\n        speak: jest.fn(),\n        cancel: jest.fn(),\n        getVoices: jest.fn(() => []),\n        onvoiceschanged: null,\n        speaking: false\n      }\n    })\n    \n    Object.defineProperty(navigator, 'clipboard', {\n      writable: true,\n      value: {\n        writeText: jest.fn(() => Promise.resolve())\n      }\n    })\n  })\n\n  describe('CardDetailModal', () => {\n    it('renders with all tabs and basic functionality', async () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n          allCards={mockRelatedCards}\n        />\n      )\n\n      // Check header\n      expect(screen.getByText('The Vault Dweller')).toBeInTheDocument()\n      expect(screen.getByText('安全')).toBeInTheDocument() // Radiation level\n\n      // Check tabs\n      expect(screen.getByText('總覽')).toBeInTheDocument()\n      expect(screen.getByText('含義')).toBeInTheDocument()\n      expect(screen.getByText('角色')).toBeInTheDocument()\n      expect(screen.getByText('背景')).toBeInTheDocument()\n      expect(screen.getByText('洞察')).toBeInTheDocument()\n      expect(screen.getByText('互動')).toBeInTheDocument()\n\n      // Check content\n      expect(screen.getByText('New beginnings in the wasteland, hope for the future')).toBeInTheDocument()\n    })\n\n    it('handles tab navigation correctly', async () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n          allCards={mockRelatedCards}\n        />\n      )\n\n      // Switch to meanings tab\n      fireEvent.click(screen.getByText('含義'))\n      \n      // Should show both upright and reversed meanings\n      await waitFor(() => {\n        expect(screen.getByText('正位意義')).toBeInTheDocument()\n        expect(screen.getByText('逆位意義')).toBeInTheDocument()\n      })\n\n      // Switch to characters tab\n      fireEvent.click(screen.getByText('角色'))\n      \n      await waitFor(() => {\n        expect(screen.getByText('選擇角色聲音')).toBeInTheDocument()\n      })\n    })\n\n    it('handles bookmark functionality', async () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n          allCards={mockRelatedCards}\n        />\n      )\n\n      // Switch to interactions tab\n      fireEvent.click(screen.getByText('互動'))\n      \n      // Find bookmark button\n      const bookmarkButton = screen.getByText('收藏')\n      fireEvent.click(bookmarkButton)\n      \n      expect(mockCardInteractions.toggleBookmark).toHaveBeenCalledWith(mockCard)\n    })\n\n    it('handles keyboard navigation', async () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n          allCards={mockRelatedCards}\n        />\n      )\n\n      // Test ESC key\n      fireEvent.keyDown(document, { key: 'Escape' })\n      // onClose would be called in real implementation\n    })\n  })\n\n  describe('Character Voice System', () => {\n    it('renders character voice selector', () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n          enableAudio={true}\n        />\n      )\n\n      fireEvent.click(screen.getByText('角色'))\n      \n      expect(screen.getByText('Pip-Boy')).toBeInTheDocument()\n      expect(screen.getByText('超級變種人')).toBeInTheDocument()\n    })\n\n    it('handles voice selection and playback', async () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n          enableAudio={true}\n        />\n      )\n\n      fireEvent.click(screen.getByText('角色'))\n      \n      // Select different voice\n      fireEvent.click(screen.getByText('超級變種人'))\n      \n      // This would trigger voice change in real implementation\n      await waitFor(() => {\n        expect(screen.getByText('Tiny human leave metal cave. Now become strong.')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('CardRelationships', () => {\n    it('renders relationship tabs and content', () => {\n      render(\n        <CardRelationships\n          card={mockCard}\n          allCards={mockRelatedCards}\n          onCardSelect={jest.fn()}\n        />\n      )\n\n      expect(screen.getByText('協同效應')).toBeInTheDocument()\n      expect(screen.getByText('卡片連結')).toBeInTheDocument()\n      expect(screen.getByText('規律模式')).toBeInTheDocument()\n    })\n\n    it('handles card connections', () => {\n      render(\n        <CardRelationships\n          card={mockCard}\n          allCards={mockRelatedCards}\n          onCardSelect={jest.fn()}\n        />\n      )\n\n      fireEvent.click(screen.getByText('卡片連結'))\n      \n      // Should show related cards\n      expect(screen.getByText('The Overseer')).toBeInTheDocument()\n    })\n  })\n\n  describe('StudyMode', () => {\n    it('renders study mode selection', () => {\n      render(<StudyMode card={mockCard} />)\n      \n      expect(screen.getByText('Card Study Mode')).toBeInTheDocument()\n      expect(screen.getByText('Flashcard Mode')).toBeInTheDocument()\n      expect(screen.getByText('Quiz Mode')).toBeInTheDocument()\n    })\n\n    it('handles flashcard mode', async () => {\n      render(<StudyMode card={mockCard} />)\n      \n      fireEvent.click(screen.getByText('Flashcard Mode'))\n      \n      await waitFor(() => {\n        expect(screen.getByText('The Vault Dweller')).toBeInTheDocument()\n        expect(screen.getByText('Click to reveal meaning')).toBeInTheDocument()\n      })\n    })\n\n    it('handles quiz mode', async () => {\n      render(<StudyMode card={mockCard} />)\n      \n      fireEvent.click(screen.getByText('Quiz Mode'))\n      \n      await waitFor(() => {\n        expect(screen.getByText('Quiz Mode')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('CardShare', () => {\n    it('renders sharing options', () => {\n      render(<CardShare card={mockCard} />)\n      \n      expect(screen.getByText('Share The Vault Dweller')).toBeInTheDocument()\n      expect(screen.getByText('Link')).toBeInTheDocument()\n      expect(screen.getByText('Image')).toBeInTheDocument()\n      expect(screen.getByText('Social')).toBeInTheDocument()\n    })\n\n    it('handles text copying', async () => {\n      render(<CardShare card={mockCard} />)\n      \n      // Switch to text mode\n      fireEvent.click(screen.getByText('Text'))\n      \n      const copyButton = screen.getByText('Copy Text')\n      fireEvent.click(copyButton)\n      \n      expect(navigator.clipboard.writeText).toHaveBeenCalled()\n    })\n\n    it('handles social media sharing', () => {\n      // Mock window.open\n      global.open = jest.fn()\n      \n      render(<CardShare card={mockCard} />)\n      \n      fireEvent.click(screen.getByText('Social'))\n      fireEvent.click(screen.getByText('Twitter'))\n      \n      expect(global.open).toHaveBeenCalled()\n    })\n  })\n\n  describe('Integration System', () => {\n    it('initializes enhanced card modal system', async () => {\n      const result = await initializeEnhancedCardModal(DEFAULT_CONFIG)\n      expect(result).toBe(true)\n    })\n\n    it('tracks card interactions', () => {\n      const { trackInteraction } = mockCardInteractions\n      \n      // This would be tracked in real implementation\n      trackInteraction?.('1', 'view')\n      // Verify tracking logic works\n    })\n  })\n\n  describe('Mobile Compatibility', () => {\n    it('handles touch interactions', () => {\n      // Mock touch events\n      const touchEvent = new TouchEvent('touchstart', {\n        touches: [{ clientX: 100, clientY: 100 } as Touch]\n      })\n      \n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      )\n      \n      // Simulate touch interaction\n      fireEvent(document, touchEvent)\n      \n      // Verify touch handling\n    })\n\n    it('adapts to screen size changes', () => {\n      // Mock window resize\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375\n      })\n      \n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      )\n      \n      // Fire resize event\n      fireEvent(window, new Event('resize'))\n      \n      // Verify responsive behavior\n    })\n  })\n\n  describe('Performance', () => {\n    it('handles large datasets efficiently', () => {\n      const manyCards = Array.from({ length: 100 }, (_, i) => ({\n        ...mockCard,\n        id: i.toString(),\n        name: `Card ${i}`\n      }))\n      \n      const start = performance.now()\n      \n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n          allCards={manyCards}\n        />\n      )\n      \n      const end = performance.now()\n      \n      // Should render in reasonable time\n      expect(end - start).toBeLessThan(1000)\n    })\n\n    it('lazy loads content appropriately', async () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      )\n      \n      // Check that image has lazy loading\n      const image = screen.getByAltText('The Vault Dweller')\n      expect(image).toHaveAttribute('loading', 'lazy')\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('provides proper ARIA labels', () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      )\n      \n      expect(screen.getByRole('dialog')).toBeInTheDocument()\n      expect(screen.getByLabelText('關閉卡牌詳情')).toBeInTheDocument()\n    })\n\n    it('supports keyboard navigation', () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      )\n      \n      // Test tab navigation\n      const firstTab = screen.getByText('總覽')\n      firstTab.focus()\n      \n      fireEvent.keyDown(firstTab, { key: 'ArrowRight', ctrlKey: true })\n      \n      // Should move to next tab\n    })\n\n    it('provides screen reader support', () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      )\n      \n      expect(screen.getByRole('dialog')).toHaveAttribute('aria-modal', 'true')\n      expect(screen.getByRole('dialog')).toHaveAttribute('aria-labelledby', 'card-modal-title')\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('handles missing card data gracefully', () => {\n      render(\n        <CardDetailModal\n          card={null}\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      )\n      \n      // Should not crash\n    })\n\n    it('handles image loading errors', async () => {\n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      )\n      \n      const image = screen.getByAltText('The Vault Dweller')\n      fireEvent.error(image)\n      \n      await waitFor(() => {\n        expect(screen.getByText('圖片載入失敗')).toBeInTheDocument()\n      })\n    })\n\n    it('handles speech synthesis errors', async () => {\n      // Mock speech synthesis to fail\n      mockTextToSpeech.speak.mockRejectedValue(new Error('Speech failed'))\n      \n      render(\n        <CardDetailModal\n          card={mockCard}\n          isOpen={true}\n          onClose={jest.fn()}\n          enableAudio={true}\n        />\n      )\n      \n      fireEvent.click(screen.getByText('角色'))\n      \n      // Should handle error gracefully\n    })\n  })\n})