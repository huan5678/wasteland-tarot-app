'use client'

import React, { useState, useMemo, useEffect } from 'react'
import { TarotCard } from '@/components/tarot/TarotCard'
import { cardsAPI, type TarotCard as TarotCardType } from '@/lib/api'
import { Grid3X3, List, Search } from 'lucide-react'

export default function CardsPage() {
  const [selectedCard, setSelectedCard] = useState<TarotCardType | null>(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedSuit, setSelectedSuit] = useState<string>('all')
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [cards, setCards] = useState<TarotCardType[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  // Fetch cards from API
  useEffect(() => {
    const fetchCards = async () => {
      try {
        setLoading(true)
        const cardsData = await cardsAPI.getAll()
        setCards(cardsData)
      } catch (err) {
        setError(err instanceof Error ? err.message : '無法載入卡牌數據')
        console.error('Failed to fetch cards:', err)
      } finally {
        setLoading(false)
      }
    }

    fetchCards()
  }, [])

  // Get unique suits from cards
  const suits = useMemo(() => {
    const suitSet = new Set(cards.map(card => card.suit))
    return Array.from(suitSet).sort()
  }, [cards])

  // Filter cards based on search and suit
  const filteredCards = useMemo(() => {
    return cards.filter(card => {
      const matchesSearch =
        card.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (card.keywords && card.keywords.some(keyword => keyword.toLowerCase().includes(searchTerm.toLowerCase())))

      const matchesSuit = selectedSuit === 'all' || card.suit === selectedSuit

      return matchesSearch && matchesSuit
    })
  }, [cards, searchTerm, selectedSuit])

  const handleCardClick = (card: any) => {
    setSelectedCard(card)
  }

  const closeModal = () => {
    setSelectedCard(null)
  }

  return (
    <div className="min-h-screen bg-vault-dark p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="border-2 border-pip-boy-green bg-pip-boy-green/10 p-4 mb-6">
          <h1 className="text-2xl font-bold text-pip-boy-green font-mono">
            塔羅牌圖書館
          </h1>
          <p className="text-pip-boy-green/70 font-mono text-sm">
            全面的廢土占卜資料庫 - 共有 {cards.length} 張牌可用
          </p>
        </div>

        {/* Controls */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          {/* Search */}
          <div className="lg:col-span-2">
            <label htmlFor="search" className="block text-pip-boy-green font-mono text-sm mb-2">
              搜尋牌片
            </label>
            <input
              id="search"
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 bg-black border border-pip-boy-green text-pip-boy-green font-mono placeholder-pip-boy-green/50 focus:outline-none focus:ring-1 focus:ring-pip-boy-green"
              placeholder="以名稱或關鍵字搜尋..."
            />
          </div>

          {/* Suit Filter */}
          <div>
            <label htmlFor="suit" className="block text-pip-boy-green font-mono text-sm mb-2">
              以花色篩選
            </label>
            <select
              id="suit"
              value={selectedSuit}
              onChange={(e) => setSelectedSuit(e.target.value)}
              className="w-full px-3 py-2 bg-black border border-pip-boy-green text-pip-boy-green font-mono focus:outline-none focus:ring-1 focus:ring-pip-boy-green"
            >
              <option value="all">所有花色</option>
              {suits.map(suit => (
                <option key={suit} value={suit}>{suit}</option>
              ))}
            </select>
          </div>

          {/* View Mode */}
          <div>
            <label className="block text-pip-boy-green font-mono text-sm mb-2">
              檢視模式
            </label>
            <div className="flex border border-pip-boy-green">
              <button
                onClick={() => setViewMode('grid')}
                className={`flex-1 py-2 px-3 font-mono text-sm transition-colors ${
                  viewMode === 'grid'
                    ? 'bg-pip-boy-green text-vault-dark'
                    : 'text-pip-boy-green hover:bg-pip-boy-green/10'
                }`}
              >
                <Grid3X3 className="w-4 h-4 mr-1" />
                {"網格"}
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={`flex-1 py-2 px-3 font-mono text-sm transition-colors border-l border-pip-boy-green ${
                  viewMode === 'list'
                    ? 'bg-pip-boy-green text-vault-dark'
                    : 'text-pip-boy-green hover:bg-pip-boy-green/10'
                }`}
              >
                <List className="w-4 h-4 mr-1" />
                {"列表"}
              </button>
            </div>
          </div>
        </div>

        {/* Results Count */}
        {!loading && (
          <div className="mb-4">
            <p className="text-pip-boy-green/70 font-mono text-sm">
              顯示 {filteredCards.length} / {cards.length} 張牌
              {searchTerm && ` 符合 "${searchTerm}"`}
              {selectedSuit !== 'all' && ` 於 ${selectedSuit}`}
            </p>
          </div>
        )}

        {/* Loading State */}
        {loading && (
          <div className="text-center py-12">
            <div className="w-16 h-16 border-4 border-pip-boy-green border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-pip-boy-green font-mono">載入卡牌資料庫中...</p>
          </div>
        )}

        {/* Error State */}
        {error && (
          <div className="text-center py-12">
            <div className="text-red-400 mb-4">
              <Search className="w-10 h-10 mx-auto mb-2" />
            </div>
            <p className="text-red-400 font-mono text-lg mb-2">
              錯誤：{error}
            </p>
            <button
              onClick={() => window.location.reload()}
              className="text-pip-boy-green font-mono hover:underline"
            >
              重試
            </button>
          </div>
        )}

        {/* Cards Display */}
        {!loading && !error && (viewMode === 'grid' ? (
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
            {filteredCards.map((card) => (
              <div
                key={card.id}
                className="cursor-pointer transform transition-all duration-200 hover:scale-105"
                onClick={() => handleCardClick(card)}
              >
                <TarotCard
                  card={card}
                  isRevealed={true}
                  position="upright"
                  size="small"
                />
                <div className="mt-2 text-center">
                  <p className="text-pip-boy-green font-mono text-xs font-bold">{card.name}</p>
                  <p className="text-pip-boy-green/70 font-mono text-xs">{card.suit}</p>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="space-y-2">
            {filteredCards.map((card) => (
              <div
                key={card.id}
                className="border border-pip-boy-green/30 bg-pip-boy-green/5 p-4 cursor-pointer hover:border-pip-boy-green hover:bg-pip-boy-green/10 transition-all duration-200"
                onClick={() => handleCardClick(card)}
              >
                <div className="flex items-center gap-4">
                  <div className="w-16 h-24 flex-shrink-0">
                    <TarotCard
                      card={card}
                      isRevealed={true}
                      position="upright"
                      size="small"
                    />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="text-lg font-bold text-pip-boy-green font-mono">{card.name}</h3>
                      <span className="text-pip-boy-green/70 font-mono text-sm">{card.suit}</span>
                    </div>
                    <p className="text-pip-boy-green/80 font-mono text-sm mb-2">
                      {card.upright_meaning}
                    </p>
                    <div className="flex flex-wrap gap-1">
                      {card.keywords && card.keywords.slice(0, 5).map((keyword, index) => (
                        <span
                          key={index}
                          className="text-xs bg-pip-boy-green/20 text-pip-boy-green px-2 py-1 border border-pip-boy-green/30 font-mono"
                        >
                          {keyword}
                        </span>
                      ))}
                      {card.keywords && card.keywords.length > 5 && (
                        <span className="text-xs text-pip-boy-green/60 font-mono">
                          +{card.keywords.length - 5} 更多
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* No Results */}
        {!loading && !error && filteredCards.length === 0 && (
          <div className="text-center py-12">
            <Search className="w-10 h-10 mb-4 mx-auto text-pip-boy-green opacity-50" />
            <p className="text-pip-boy-green/70 font-mono text-lg mb-2">
              找不到牌片
            </p>
            <p className="text-pip-boy-green/50 font-mono text-sm">
              請嘗試調整你的搜尋條件或篩選器
            </p>
          </div>
        )}
      </div>

      {/* Card Detail Modal */}
      {selectedCard && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center p-4 z-50">
          <div className="bg-vault-dark border-2 border-pip-boy-green max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            {/* Modal Header */}
            <div className="border-b border-pip-boy-green/30 p-4 flex items-center justify-between">
              <h2 className="text-xl font-bold text-pip-boy-green font-mono">
                牌片詳情
              </h2>
              <button
                onClick={closeModal}
                className="text-pip-boy-green hover:text-pip-boy-green/80 text-2xl font-bold"
              >
                ×
              </button>
            </div>

            {/* Modal Content */}
            <div className="p-6">
              <div className="flex flex-col md:flex-row gap-6">
                {/* Card Image */}
                <div className="md:w-1/3">
                  <TarotCard
                    card={selectedCard}
                    isRevealed={true}
                    position="upright"
                    size="large"
                  />
                </div>

                {/* Card Info */}
                <div className="md:w-2/3">
                  <h3 className="text-2xl font-bold text-pip-boy-green font-mono mb-2">
                    {selectedCard.name}
                  </h3>

                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <p className="text-pip-boy-green/70 font-mono text-sm">花色</p>
                      <p className="text-pip-boy-green font-mono">{selectedCard.suit}</p>
                    </div>
                    {selectedCard.number && (
                      <div>
                        <p className="text-pip-boy-green/70 font-mono text-sm">數字</p>
                        <p className="text-pip-boy-green font-mono">{selectedCard.number}</p>
                      </div>
                    )}
                  </div>

                  <div className="mb-4">
                    <h4 className="text-pip-boy-green font-mono font-bold mb-2">正位含意</h4>
                    <p className="text-pip-boy-green/80 font-mono text-sm leading-relaxed">
                      {selectedCard.upright_meaning}
                    </p>
                  </div>

                  <div className="mb-4">
                    <h4 className="text-pip-boy-green font-mono font-bold mb-2">逆位含意</h4>
                    <p className="text-pip-boy-green/80 font-mono text-sm leading-relaxed">
                      {selectedCard.reversed_meaning}
                    </p>
                  </div>

                  {selectedCard.keywords && (
                    <div>
                      <h4 className="text-pip-boy-green font-mono font-bold mb-2">關鍵字</h4>
                      <div className="flex flex-wrap gap-2">
                        {selectedCard.keywords.map((keyword: string, index: number) => (
                          <span
                            key={index}
                            className="text-xs bg-pip-boy-green/20 text-pip-boy-green px-2 py-1 border border-pip-boy-green/30 font-mono"
                          >
                            {keyword}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}