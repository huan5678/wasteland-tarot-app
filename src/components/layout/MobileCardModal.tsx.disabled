/**\n * Mobile-Optimized Card Modal Wrapper\n * Provides responsive design optimizations for mobile devices\n */\n\n'use client'\n\nimport React, { useEffect, useState, useCallback } from 'react'\nimport { motion, PanInfo } from 'framer-motion'\nimport { X, ChevronDown } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport { CardDetailModal, DetailedTarotCard, CardDetailModalProps } from '../tarot/CardDetailModal'\nimport { CardSynergy } from '../tarot/CardRelationships'\n\nexport interface MobileCardModalProps extends Omit<CardDetailModalProps, 'isOpen' | 'onClose'> {\n  isOpen: boolean\n  onClose: () => void\n  enableSwipeGestures?: boolean\n  snapToFullscreen?: boolean\n  initialHeight?: 'half' | 'full'\n}\n\ntype ModalState = 'closed' | 'peek' | 'half' | 'full'\n\nexport function MobileCardModal({\n  card,\n  isOpen,\n  onClose,\n  enableSwipeGestures = true,\n  snapToFullscreen = false,\n  initialHeight = 'half',\n  ...modalProps\n}: MobileCardModalProps) {\n  const [modalState, setModalState] = useState<ModalState>('closed')\n  const [dragY, setDragY] = useState(0)\n  const [isMobile, setIsMobile] = useState(false)\n  const [viewportHeight, setViewportHeight] = useState(0)\n\n  // Detect mobile device and viewport\n  useEffect(() => {\n    const checkMobile = () => {\n      const mobile = window.innerWidth < 768 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n      setIsMobile(mobile)\n      setViewportHeight(window.innerHeight)\n    }\n\n    checkMobile()\n    window.addEventListener('resize', checkMobile)\n    window.addEventListener('orientationchange', () => {\n      setTimeout(checkMobile, 100) // Delay to get accurate height after orientation change\n    })\n\n    return () => {\n      window.removeEventListener('resize', checkMobile)\n      window.removeEventListener('orientationchange', checkMobile)\n    }\n  }, [])\n\n  // Handle modal state changes\n  useEffect(() => {\n    if (isOpen) {\n      setModalState(snapToFullscreen ? 'full' : initialHeight === 'full' ? 'full' : 'half')\n      setDragY(0)\n    } else {\n      setModalState('closed')\n      setDragY(0)\n    }\n  }, [isOpen, snapToFullscreen, initialHeight])\n\n  // Get modal height based on state\n  const getModalHeight = useCallback(() => {\n    switch (modalState) {\n      case 'closed':\n        return '0%'\n      case 'peek':\n        return '30%'\n      case 'half':\n        return '70%'\n      case 'full':\n        return '100%'\n      default:\n        return '70%'\n    }\n  }, [modalState])\n\n  // Handle drag gestures\n  const handleDrag = useCallback((event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {\n    if (!enableSwipeGestures) return\n    \n    const newY = Math.max(0, info.offset.y)\n    setDragY(newY)\n  }, [enableSwipeGestures])\n\n  // Handle drag end - snap to closest state\n  const handleDragEnd = useCallback((event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {\n    if (!enableSwipeGestures) return\n\n    const velocity = info.velocity.y\n    const dragDistance = info.offset.y\n    const threshold = viewportHeight * 0.2\n\n    // Determine next state based on drag distance and velocity\n    if (velocity > 500 || dragDistance > threshold) {\n      // Dragging down - minimize or close\n      if (modalState === 'full') {\n        setModalState('half')\n      } else if (modalState === 'half') {\n        setModalState('peek')\n      } else {\n        onClose()\n      }\n    } else if (velocity < -500 || dragDistance < -threshold) {\n      // Dragging up - maximize\n      if (modalState === 'peek') {\n        setModalState('half')\n      } else if (modalState === 'half') {\n        setModalState('full')\n      }\n    }\n    \n    // Reset drag offset\n    setDragY(0)\n  }, [enableSwipeGestures, modalState, viewportHeight, onClose])\n\n  // Handle backdrop tap\n  const handleBackdropTap = useCallback(() => {\n    if (modalState === 'full') {\n      setModalState('half')\n    } else {\n      onClose()\n    }\n  }, [modalState, onClose])\n\n  // Prevent body scroll when modal is open\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      document.body.style.overflow = 'hidden'\n      return () => {\n        document.body.style.overflow = 'auto'\n      }\n    }\n  }, [isOpen, isMobile])\n\n  // If not mobile, use regular desktop modal\n  if (!isMobile) {\n    return (\n      <CardDetailModal\n        {...modalProps}\n        card={card}\n        isOpen={isOpen}\n        onClose={onClose}\n      />\n    )\n  }\n\n  // Mobile modal variant\n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: modalState === 'closed' ? 0 : 0.5 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black z-40\"\n          onClick={handleBackdropTap}\n        />\n      )}\n\n      {/* Modal Container */}\n      <motion.div\n        initial={{ y: '100%' }}\n        animate={{\n          y: modalState === 'closed' ? '100%' : `calc(100% - ${getModalHeight()})`,\n          transition: {\n            type: 'spring',\n            damping: 30,\n            stiffness: 300\n          }\n        }}\n        drag={enableSwipeGestures ? 'y' : false}\n        dragConstraints={{ top: 0, bottom: viewportHeight }}\n        dragElastic={0.1}\n        onDrag={handleDrag}\n        onDragEnd={handleDragEnd}\n        style={{\n          transform: `translateY(${dragY}px)`\n        }}\n        className=\"fixed bottom-0 left-0 right-0 z-50 bg-vault-dark border-t-2 border-pip-boy-green rounded-t-2xl shadow-2xl\"\n      >\n        {/* Drag Handle */}\n        <div className=\"flex justify-center py-3 border-b border-pip-boy-green/20\">\n          <motion.div\n            className=\"w-12 h-1 bg-pip-boy-green/40 rounded-full cursor-grab active:cursor-grabbing\"\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n          />\n        </div>\n\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-pip-boy-green/20 bg-pip-boy-green/5\">\n          <div className=\"flex items-center gap-3\">\n            <h2 className=\"text-lg font-bold text-pip-boy-green font-mono\">\n              {card?.name || 'Card Details'}\n            </h2>\n            {modalState !== 'full' && (\n              <motion.button\n                onClick={() => setModalState('full')}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                className=\"p-1 text-pip-boy-green/60 hover:text-pip-boy-green\"\n                title=\"Expand\"\n              >\n                <ChevronDown className=\"w-4 h-4 rotate-180\" />\n              </motion.button>\n            )}\n          </div>\n          <motion.button\n            onClick={onClose}\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            className=\"p-2 text-pip-boy-green/60 hover:text-pip-boy-green rounded-full hover:bg-pip-boy-green/10\"\n          >\n            <X className=\"w-5 h-5\" />\n          </motion.button>\n        </div>\n\n        {/* Content */}\n        <div \n          className=\"flex-1 overflow-y-auto overscroll-contain\"\n          style={{\n            maxHeight: modalState === 'full' \n              ? `${viewportHeight - 120}px` \n              : modalState === 'half'\n              ? `${viewportHeight * 0.7 - 120}px`\n              : `${viewportHeight * 0.3 - 120}px`\n          }}\n        >\n          {card && (\n            <div className=\"p-4\">\n              {/* Simplified content for mobile */}\n              <div className=\"space-y-4\">\n                {/* Card Image - Smaller on mobile */}\n                <div className=\"relative w-full max-w-xs mx-auto\">\n                  <div className={cn(\n                    \"aspect-[2/3] border-2 border-pip-boy-green/60 rounded-lg overflow-hidden bg-vault-dark\",\n                    card.position === 'reversed' && \"transform rotate-180\"\n                  )}>\n                    <img\n                      src={card.image_url}\n                      alt={card.name}\n                      className=\"w-full h-full object-cover\"\n                      loading=\"lazy\"\n                    />\n                  </div>\n                </div>\n\n                {/* Quick Info */}\n                <div className=\"text-center space-y-2\">\n                  <h3 className=\"text-xl font-bold text-pip-boy-green font-mono\">{card.name}</h3>\n                  <div className=\"text-pip-boy-green/70 font-mono text-sm\">\n                    {card.suit} • {card.number || card.card_number || 'N/A'}\n                  </div>\n                </div>\n\n                {/* Meaning - Condensed for mobile */}\n                <div className=\"bg-pip-boy-green/5 border border-pip-boy-green/20 p-4 rounded-lg\">\n                  <h4 className=\"text-pip-boy-green font-mono font-bold mb-2\">\n                    {card.position === 'reversed' ? '逆位含義' : '正位含義'}\n                  </h4>\n                  <p className=\"text-pip-boy-green/90 font-mono text-sm leading-relaxed\">\n                    {card.position === 'reversed' \n                      ? (card.reversed_meaning || card.meaning_reversed || '未知含義')\n                      : (card.upright_meaning || card.meaning_upright || '未知含義')\n                    }\n                  </p>\n                </div>\n\n                {/* Keywords */}\n                {card.keywords && card.keywords.length > 0 && (\n                  <div>\n                    <h4 className=\"text-pip-boy-green font-mono font-bold mb-2\">關鍵詞</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {card.keywords.slice(0, 6).map((keyword, index) => (\n                        <span\n                          key={index}\n                          className=\"px-2 py-1 bg-pip-boy-green/10 border border-pip-boy-green/30 text-pip-boy-green/80 text-xs font-mono rounded\"\n                        >\n                          {keyword}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Expand hint */}\n                {modalState !== 'full' && (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    className=\"text-center py-4\"\n                  >\n                    <motion.button\n                      onClick={() => setModalState('full')}\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                      className=\"px-4 py-2 bg-pip-boy-green/20 border border-pip-boy-green text-pip-boy-green font-mono text-sm rounded hover:bg-pip-boy-green/30 transition-colors\"\n                    >\n                      展開詳細資訊\n                    </motion.button>\n                  </motion.div>\n                )}\n\n                {/* Full content when expanded */}\n                {modalState === 'full' && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0 }}\n                    animate={{ opacity: 1, height: 'auto' }}\n                    className=\"space-y-4\"\n                  >\n                    {/* Use the full CardDetailModal content here but in mobile-optimized layout */}\n                    <CardDetailModal\n                      {...modalProps}\n                      card={card}\n                      isOpen={true}\n                      onClose={onClose}\n                      className=\"bg-transparent border-none p-0\"\n                    />\n                  </motion.div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </motion.div>\n    </>\n  )\n}\n\nexport default MobileCardModal