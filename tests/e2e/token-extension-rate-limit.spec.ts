/**
 * E2E Tests - Token Extension Rate Limiting and Persistence
 *
 * Feature: ÈÄüÁéáÈôêÂà∂ËàáÁãÄÊÖãÊåÅ‰πÖÂåñ
 * Test Coverage:
 * - Token Âª∂Èï∑ÈÄüÁéáÈôêÂà∂ÔºàÈò≤Ê≠¢Êø´Áî®Ôºâ
 * - localStorage ÊåÅ‰πÖÂåñÊ©üÂà∂
 * - Token ÈÅéÊúüÊôÇÈñìÊõ¥Êñ∞È©óË≠â
 * - È†ÅÈù¢ÈáçÊñ∞ËºâÂÖ•ÂæåÁãÄÊÖãÊÅ¢Âæ©
 * - Ê¥ªË∫çÂ∫¶ÈÄ≤Â∫¶Ë∑®È†ÅÈù¢ÊåÅ‰πÖÂåñ
 */

import { test, expect, type Page } from '@playwright/test'

const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000'
const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000'

// Test credentials
const TEST_USER = {
  username: `rate_limit_test_${Date.now()}`,
  email: `rate_limit_test_${Date.now()}@example.com`,
  password: 'Test1234!@#$'
}

// Helper: Wait for element to be visible
async function waitForElement(page: Page, selector: string, timeout = 10000) {
  await page.waitForSelector(selector, { timeout, state: 'visible' })
}

// Helper: Setup console error monitoring
function setupConsoleMonitoring(page: Page) {
  const errors: string[] = []
  const warnings: string[] = []

  page.on('console', msg => {
    const type = msg.type()
    const text = msg.text()

    if (type === 'error' && !text.includes('Console Ninja')) {
      errors.push(text)
      console.error('‚ùå Console Error:', text)
    } else if (type === 'warning' && !text.includes('Console Ninja')) {
      warnings.push(text)
    }
  })

  page.on('pageerror', error => {
    errors.push(error.message)
    console.error('‚ùå Page Error:', error.message)
  })

  return { errors, warnings }
}

// Helper: Get activity progress from localStorage
async function getStoredActivityProgress(page: Page): Promise<{
  accumulatedTime: number
  startTime: number | null
  lastUpdate: number
} | null> {
  return await page.evaluate(() => {
    const stored = localStorage.getItem('activity-progress')
    return stored ? JSON.parse(stored) : null
  })
}

// Helper: Get token from localStorage
async function getStoredToken(page: Page): Promise<string | null> {
  return await page.evaluate(() => localStorage.getItem('token'))
}

// Helper: Decode JWT and get expiration time
async function getTokenExpiration(page: Page): Promise<number | null> {
  return await page.evaluate(() => {
    const token = localStorage.getItem('token')
    if (!token) return null

    try {
      const base64Url = token.split('.')[1]
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')
      const jsonPayload = decodeURIComponent(
        atob(base64)
          .split('')
          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
          .join('')
      )
      const payload = JSON.parse(jsonPayload)
      return payload.exp || null
    } catch {
      return null
    }
  })
}

// Helper: Simulate activity
async function simulateActivity(page: Page, durationMs: number) {
  const startTime = Date.now()
  const intervalMs = 5000

  while (Date.now() - startTime < durationMs) {
    await page.mouse.move(
      Math.random() * 500 + 100,
      Math.random() * 500 + 100
    )
    await page.mouse.click(
      Math.random() * 100 + 50,
      Math.random() * 100 + 50
    )
    await page.waitForTimeout(intervalMs)
  }
}

// Helper: Get activity progress from UI
async function getActivityProgress(page: Page): Promise<number> {
  await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)
  const progressText = await page.locator('span:has-text("%")').first().textContent()
  if (!progressText) return 0
  const match = progressText.match(/(\d+)%/)
  return match ? parseInt(match[1], 10) : 0
}

test.describe('Token Extension - Rate Limiting and Persistence', () => {
  let consoleMonitor: { errors: string[], warnings: string[] }

  test.beforeEach(async ({ page }) => {
    consoleMonitor = setupConsoleMonitoring(page)
  })

  test.afterEach(async () => {
    if (consoleMonitor.errors.length > 0) {
      console.warn(`‚ö†Ô∏è Test had ${consoleMonitor.errors.length} console errors`)
    }
  })

  test('‰ΩøÁî®ËÄÖË®ªÂÜä‰∏¶ÁôªÂÖ•', async ({ page }) => {
    await page.goto(FRONTEND_URL)
    await expect(page).toHaveTitle(/Âª¢ÂúüÂ°îÁæÖ/)

    await page.click('a[href="/auth/register"]')
    await waitForElement(page, 'form', 5000)

    await page.fill('input[name="username"], input[type="text"]', TEST_USER.username)
    await page.fill('input[name="email"], input[type="email"]', TEST_USER.email)
    await page.fill('input[name="password"], input[type="password"]', TEST_USER.password)

    await page.click('button[type="submit"]:has-text("Ë®ªÂÜä")')
    await page.waitForTimeout(2000)

    const currentUrl = page.url()
    if (currentUrl.includes('/auth/login')) {
      await page.fill('input[type="email"]', TEST_USER.email)
      await page.fill('input[type="password"]', TEST_USER.password)
      await page.click('button[type="submit"]:has-text("ÁôªÂÖ•")')
    }

    await page.waitForTimeout(2000)
    const hasLogoutButton = await page.locator('button:has-text("ÁôªÂá∫"), a:has-text("ÁôªÂá∫")').count() > 0
    expect(hasLogoutButton).toBe(true)
  })

  test('Ê¥ªË∫çÂ∫¶ÈÄ≤Â∫¶ÊåÅ‰πÖÂåñËá≥ localStorage', async ({ page }) => {
    // Login
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // ÂâçÂæÄ Profile È†ÅÈù¢
    await page.goto(`${FRONTEND_URL}/profile`)
    await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)

    // Ê®°Êì¨Ê¥ªË∫ç 2 ÂàÜÈêò
    console.log('üéÆ Simulating 2 minutes of activity...')
    await simulateActivity(page, 120000)
    await page.waitForTimeout(2000)

    // ËÆÄÂèñ UI ÈÄ≤Â∫¶
    const uiProgress = await getActivityProgress(page)
    console.log(`üìä UI Progress: ${uiProgress}%`)

    // ËÆÄÂèñ localStorage ÈÄ≤Â∫¶
    const storedProgress = await getStoredActivityProgress(page)
    console.log('üíæ Stored Progress:', storedProgress)

    // È©óË≠â localStorage ÊúâÂÑ≤Â≠òÈÄ≤Â∫¶
    expect(storedProgress).not.toBeNull()
    expect(storedProgress!.accumulatedTime).toBeGreaterThan(0)

    // Ë®àÁÆóÈ†êÊúüÈÄ≤Â∫¶Ôºà2ÂàÜÈêò / 30ÂàÜÈêò ‚âà 6.67%Ôºâ
    const expectedProgressMin = 6
    expect(uiProgress).toBeGreaterThanOrEqual(expectedProgressMin)
  })

  test('È†ÅÈù¢ÈáçÊñ∞ËºâÂÖ•ÂæåÊÅ¢Âæ©Ê¥ªË∫çÂ∫¶ÈÄ≤Â∫¶', async ({ page }) => {
    // Login
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // ÂâçÂæÄ Profile È†ÅÈù¢
    await page.goto(`${FRONTEND_URL}/profile`)
    await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)

    // Ê®°Êì¨Ê¥ªË∫ç 1 ÂàÜÈêò
    await simulateActivity(page, 60000)
    await page.waitForTimeout(2000)

    // Ë®òÈåÑÈáçÊñ∞ËºâÂÖ•ÂâçÁöÑÈÄ≤Â∫¶
    const progressBeforeReload = await getActivityProgress(page)
    const storedBeforeReload = await getStoredActivityProgress(page)
    console.log(`üìä Progress before reload: ${progressBeforeReload}%`)
    console.log('üíæ Stored before reload:', storedBeforeReload)

    // ÈáçÊñ∞ËºâÂÖ•È†ÅÈù¢
    await page.reload()
    await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)

    // Ë®òÈåÑÈáçÊñ∞ËºâÂÖ•ÂæåÁöÑÈÄ≤Â∫¶
    const progressAfterReload = await getActivityProgress(page)
    const storedAfterReload = await getStoredActivityProgress(page)
    console.log(`üìä Progress after reload: ${progressAfterReload}%`)
    console.log('üíæ Stored after reload:', storedAfterReload)

    // È©óË≠âÈÄ≤Â∫¶‰øùÊåÅ‰∏ÄËá¥ÔºàÂÖÅË®±Â∞èÂπÖÂ∫¶Â∑ÆÁï∞ ¬±2%Ôºâ
    expect(Math.abs(progressAfterReload - progressBeforeReload)).toBeLessThanOrEqual(2)

    // È©óË≠â localStorage Ë≥áÊñô‰∏ÄËá¥
    expect(storedAfterReload).not.toBeNull()
    expect(storedAfterReload!.accumulatedTime).toBeGreaterThan(0)
  })

  test('Token ÂÑ≤Â≠òÂú® localStorage', async ({ page }) => {
    // Login
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // Ê™¢Êü• token ÊòØÂê¶Â≠òÂú®Êñº localStorage
    const token = await getStoredToken(page)
    expect(token).not.toBeNull()
    expect(token).toBeTruthy()

    // È©óË≠â token Ê†ºÂºèÔºàJWT: header.payload.signatureÔºâ
    const tokenParts = token!.split('.')
    expect(tokenParts.length).toBe(3)

    console.log('‚úÖ Token stored in localStorage')
    console.log(`üìù Token: ${token!.substring(0, 50)}...`)
  })

  test('Token ÈÅéÊúüÊôÇÈñìÂèØË¢´Ëß£Á¢º', async ({ page }) => {
    // Login
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // Ëß£Á¢º token Áç≤ÂèñÈÅéÊúüÊôÇÈñì
    const expiration = await getTokenExpiration(page)
    expect(expiration).not.toBeNull()

    // È©óË≠âÈÅéÊúüÊôÇÈñìÊòØÊú™‰æÜÁöÑÊôÇÈñìÊà≥
    const now = Math.floor(Date.now() / 1000)
    expect(expiration).toBeGreaterThan(now)

    // Ë®àÁÆóÂâ©È§òÊôÇÈñì
    const remainingSeconds = expiration! - now
    const remainingMinutes = Math.floor(remainingSeconds / 60)

    console.log(`‚úÖ Token expires in ${remainingMinutes} minutes`)
    console.log(`üìÖ Expiration timestamp: ${expiration}`)
  })

  test('ÂÆåÊàêÊ¥ªË∫ç30ÂàÜÈêòÂæå Token Âª∂Èï∑', async ({ page }, testInfo) => {
    testInfo.setTimeout(1860000) // 31 minutes timeout

    // Login
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // Ë®òÈåÑÂàùÂßã token ÈÅéÊúüÊôÇÈñì
    const initialExpiration = await getTokenExpiration(page)
    console.log(`‚è∞ Initial token expiration: ${initialExpiration}`)

    // ÂâçÂæÄ Profile È†ÅÈù¢
    await page.goto(`${FRONTEND_URL}/profile`)
    await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)

    // Ê®°Êì¨Ê¥ªË∫ç 30 ÂàÜÈêò
    console.log('üéÆ Simulating 30 minutes of activity...')
    await simulateActivity(page, 1800000)

    // Á≠âÂæÖ API ÂëºÂè´ÂíåÁãÄÊÖãÊõ¥Êñ∞
    await page.waitForTimeout(5000)

    // Ë®òÈåÑÂª∂Èï∑ÂæåÁöÑ token ÈÅéÊúüÊôÇÈñì
    const extendedExpiration = await getTokenExpiration(page)
    console.log(`‚è∞ Extended token expiration: ${extendedExpiration}`)

    // È©óË≠â token ÈÅéÊúüÊôÇÈñìÂ∑≤Âª∂Èï∑
    if (initialExpiration && extendedExpiration) {
      expect(extendedExpiration).toBeGreaterThan(initialExpiration)

      const extensionSeconds = extendedExpiration - initialExpiration
      const extensionMinutes = Math.floor(extensionSeconds / 60)
      console.log(`‚úÖ Token extended by ${extensionMinutes} minutes`)

      // È©óË≠âÂª∂Èï∑ÊôÇÈñìËá≥Â∞ë30ÂàÜÈêòÔºàÊ¥ªË∫çÂ∫¶Âü∫Á§éÁçéÂãµÔºâ
      expect(extensionMinutes).toBeGreaterThanOrEqual(30)
    } else {
      console.log('‚ÑπÔ∏è  Unable to verify token extension (token format may have changed)')
    }
  })

  test('Âø†Ë™†Â∫¶Ê™¢Êü•Ë®òÈåÑÊåÅ‰πÖÂåñ', async ({ page }) => {
    // Login
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // ÂâçÂæÄ‰ªª‰ΩïÈ†ÅÈù¢Ëß∏Áôº LoyaltyRewardInitializer
    await page.goto(`${FRONTEND_URL}/profile`)
    await page.waitForTimeout(2000)

    // Ê™¢Êü• loyalty-reward-last-check ÊòØÂê¶Ë¢´ÂØ´ÂÖ•
    const lastCheck = await page.evaluate(() => localStorage.getItem('loyalty-reward-last-check'))
    expect(lastCheck).not.toBeNull()

    const today = new Date().toDateString()
    expect(lastCheck).toBe(today)

    console.log(`‚úÖ Loyalty check recorded: ${lastCheck}`)
  })

  test('Ê∏ÖÁ©∫ localStorage ÂæåÈáçÊñ∞ÁôªÂÖ•ÂèØÊÅ¢Âæ©ÁãÄÊÖã', async ({ page }) => {
    // Login
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // ÂâçÂæÄ Profile È†ÅÈù¢Âª∫Á´ã‰∏Ä‰∫õÈÄ≤Â∫¶
    await page.goto(`${FRONTEND_URL}/profile`)
    await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)
    await simulateActivity(page, 60000) // 1 minute
    await page.waitForTimeout(2000)

    // Ê∏ÖÁ©∫ localStorageÔºàÊ®°Êì¨Ê∏ÖÈô§ÁÄèË¶ΩÂô®Ë≥áÊñôÔºâ
    await page.evaluate(() => localStorage.clear())

    // È©óË≠â token ÂíåÈÄ≤Â∫¶Â∑≤Ê∏ÖÈô§
    const tokenAfterClear = await getStoredToken(page)
    const progressAfterClear = await getStoredActivityProgress(page)
    expect(tokenAfterClear).toBeNull()
    expect(progressAfterClear).toBeNull()

    console.log('üóëÔ∏è localStorage cleared')

    // ÈáçÊñ∞ÁôªÂÖ•
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // È©óË≠â token ÈáçÊñ∞ÂØ´ÂÖ•
    const newToken = await getStoredToken(page)
    expect(newToken).not.toBeNull()
    expect(newToken).toBeTruthy()

    // ÂâçÂæÄ Profile È†ÅÈù¢Ê™¢Êü•ÈÄ≤Â∫¶ÈáçÁΩÆ
    await page.goto(`${FRONTEND_URL}/profile`)
    await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)

    const newProgress = await getActivityProgress(page)
    console.log(`üìä New progress after re-login: ${newProgress}%`)

    // Êñ∞ÁôªÂÖ•ÁöÑÈÄ≤Â∫¶ÊáâË©≤Âæû0ÈñãÂßãÔºàÊàñÊé•Ëøë0Ôºâ
    expect(newProgress).toBeLessThanOrEqual(5)

    console.log('‚úÖ State recovered after localStorage clear and re-login')
  })

  test('È©óË≠âÊ¥ªË∫çÂ∫¶ÈÄ≤Â∫¶‰∏äÈôêÁÇ∫100%', async ({ page }, testInfo) => {
    testInfo.setTimeout(1920000) // 32 minutes timeout

    // Login
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // ÂâçÂæÄ Profile È†ÅÈù¢
    await page.goto(`${FRONTEND_URL}/profile`)
    await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)

    // Ê®°Êì¨Ê¥ªË∫ç 31 ÂàÜÈêòÔºàË∂ÖÈÅé30ÂàÜÈêò‰∏äÈôêÔºâ
    console.log('üéÆ Simulating 31 minutes of activity...')
    await simulateActivity(page, 1860000)
    await page.waitForTimeout(2000)

    // Ê™¢Êü•ÈÄ≤Â∫¶
    const finalProgress = await getActivityProgress(page)
    console.log(`üìä Final Progress: ${finalProgress}%`)

    // È©óË≠âÈÄ≤Â∫¶‰∏çË∂ÖÈÅé100%
    expect(finalProgress).toBeLessThanOrEqual(100)

    // Â¶ÇÊûúÈÅîÂà∞100%ÔºåÊ™¢Êü•ÊòØÂê¶È°ØÁ§∫ÂÆåÊàêË®äÊÅØ
    if (finalProgress === 100) {
      const completeMessage = await page.locator('text=Token Âª∂Èï∑Â∑≤Ëß∏Áôº').isVisible({ timeout: 3000 }).catch(() => false)
      if (completeMessage) {
        console.log('‚úÖ Completion message displayed at 100%')
      }
    }
  })

  test('Ë∑®È†ÅÈù¢Â∞éËà™‰øùÊåÅÊ¥ªË∫çÂ∫¶ÁãÄÊÖã', async ({ page }) => {
    // Login
    await page.goto(`${FRONTEND_URL}/auth/login`)
    await page.fill('input[type="email"]', TEST_USER.email)
    await page.fill('input[type="password"]', TEST_USER.password)
    await page.click('button[type="submit"]')
    await page.waitForTimeout(2000)

    // Âú® Profile È†ÅÈù¢Âª∫Á´ãÈÄ≤Â∫¶
    await page.goto(`${FRONTEND_URL}/profile`)
    await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)
    await simulateActivity(page, 60000) // 1 minute
    await page.waitForTimeout(2000)

    const profileProgress = await getActivityProgress(page)
    console.log(`üìä Progress on Profile page: ${profileProgress}%`)

    // Â∞éËà™Ëá≥ÂÖ∂‰ªñÈ†ÅÈù¢
    await page.goto(`${FRONTEND_URL}/dashboard`)
    await page.waitForTimeout(2000)

    // ËøîÂõû Profile È†ÅÈù¢
    await page.goto(`${FRONTEND_URL}/profile`)
    await waitForElement(page, 'section:has-text("Pip-Boy Ê¥ªË∫çÂ∫¶Á≥ªÁµ±")', 5000)

    const returnProgress = await getActivityProgress(page)
    console.log(`üìä Progress after navigation: ${returnProgress}%`)

    // È©óË≠âÈÄ≤Â∫¶‰øùÊåÅÔºàÂÖÅË®±Â∞èÂπÖÂ∫¶Â∑ÆÁï∞Ôºâ
    expect(Math.abs(returnProgress - profileProgress)).toBeLessThanOrEqual(2)

    console.log('‚úÖ Activity state persists across page navigation')
  })
})
